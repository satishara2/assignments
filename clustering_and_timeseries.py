# -*- coding: utf-8 -*-
"""Clustering and timeseries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qug2Og1K0keFRRuVt2_iO9T2fblYa4Go
"""

import pandas as pd
import numpy as np
from sklearn import datasets

raw_data = datasets.load_iris()

X = raw_data.data

"""heirarchical clustering"""

from scipy.spatial.distance import pdist
from scipy.cluster.hierarchy import linkage


data_dist = pdist(X)
data_link = linkage(data_dist)

from scipy.cluster.hierarchy import dendrogram
import matplotlib.pyplot as plt

dendrogram(data_link)
plt.axhline(y=0.78, color='red', linestyle='--')
plt.show()

# Agglomerative and Divisive
from sklearn.cluster import AgglomerativeClustering

cluster = AgglomerativeClustering(n_clusters=3)
cluster.fit_predict(X)

raw_data.target

"""## Kmeans clustering"""

from sklearn.cluster import KMeans

model = KMeans(n_clusters=3)
model.fit_predict(X)

raw_data.target

"""## Timeseries"""

data = pd.read_csv('https://raw.githubusercontent.com/Hemanthkaruturi/python_for_datascience/master/data/daily-min-temperatures.csv')

data.dtypes

data.head()

data['Date'] = pd.to_datetime(data['Date'])

data.dtypes

import matplotlib.pyplot as plt

plt.plot(data['Date'], data['Temp'])

from statsmodels.tsa.seasonal import seasonal_decompose

decomposition = seasonal_decompose(data['Temp'], freq=12)

import matplotlib.pyplot as plt

fig = plt.figure()
fig = decomposition.plot()
fig.show()

from statsmodels.graphics.tsaplots import plot_acf

plot_acf(data['Temp'])

from statsmodels.tsa.stattools import acf
acf(data['Temp'])

data.index = data['Date']
data = data.drop(columns='Date')

data

from statsmodels.tsa.statespace.sarimax import SARIMAX

model = SARIMAX(data, order=(1,1,1), seasonal=(1,0,0))
model_fit = model.fit()
model_fit.predict(start=3651, end=3656)

model_fit.aic

import itertools

p = d = q = range(0,2)
pdq = list(itertools.product(p,d,q))

pdq

aic = []
orders = []
seasonal = []
for params in pdq:
  for params_seasonal in pdq:
    model = SARIMAX(data, order=params, seasonal=params_seasonal)
    model_fit = model.fit()
    #print('({},{},{})x({},{},{}) -> aic: {}'.format(params[0], params[1], params[2], params_seasonal[0], params_seasonal[1], params_seasonal[2], model_fit.aic))
    aic.append(model_fit.aic)
    orders.append(params)
    seasonal.append(params_seasonal)

# save the data into a dataframe
# find the minimum aic

from statsmodels.tsa.statespace.sarimax import SARIMAX

model = SARIMAX(data, order=(1,1,1), seasonal=(1,1,1))
model_fit = model.fit()
model_fit.predict(start=3651, end=3656)

model_fit.summary()

